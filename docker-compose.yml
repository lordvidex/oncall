version: "3"

services:
  sla-checker:
    image: lordvidex/oncall-sla-checker:latest
    networks:
      - iris
    restart: unless-stopped
    depends_on:
      - oncall-prometheus
      - sla-db
    volumes:
      - ./configs/sla.yaml:/sla.yaml
    environment:
      DATABASE_URL: postgresql://postgres:1234@sla-db:5432/sla
      LOG_LEVEL: debug
      METRICS_FILE: /sla.yaml

  sla-prober:
    image: lordvidex/oncall-sla-prober:latest
    networks:
      - iris
    restart: unless-stopped
    ports:
      - "9214:8091"
    depends_on:
      - oncall-web
    labels:
      - prometheus-job=oncall-sla-prober
    volumes:
      - ./configs/roster.yaml:/roster.yaml
    command:
      - "-oncall=http://oncall-web:8080"
      - "-scrape-duration=30s"
      - "-port=8091"
      - "-f=/roster.yaml"
  # custom exporter that exposes metrics relating to business logic of oncall-web
  oncall-roster-exporter:
    image: lordvidex/oncall-roster-exporter:latest
    networks:
      - iris
    restart: unless-stopped
    ports:
      - "9213:8090"
    depends_on:
      - oncall-web
    labels:
      - prometheus-job=oncall-roster-exporter
    command:
      - "-oncall=http://oncall-web:8080"
      - "-scrape-duration=30s"
      - "-port=8090"
      # - "-silent" # remove logs
  # one shot container that writes metrics for the number of containers contained in this docker compose instance
  count-containers:
    container_name: count-containers
    build:
      context: ./ops/scripts/count-containers
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - textfile:/tmp/textfile/
    depends_on:
      - oncall-web
      - oncall-mysql
      - node-exporter
      - oncall-prometheus

  # exports blackbox metrics for checking network status
  blackbox-exporter:
    image: quay.io/prometheus/blackbox-exporter:latest
    ports:
      - "9115:9115"
    command:
      - "--config.file=/etc/blackbox_exporter/config.yml"
    volumes:
      - ./configs/blackbox.yml:/etc/blackbox_exporter/config.yml
    networks:
      - iris

  # node-exporter exposes metrics for the docker instance
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    pid: host
    user: root
    restart: unless-stopped
    command:
      - "--path.rootfs=/host"
      - "--no-collector.nfs"
      - "--no-collector.zfs"
      - "--no-collector.mdadm"
      - "--no-collector.bonding"
      - "--no-collector.selinux"
      - "--no-collector.conntrack"
      - "--no-collector.hwmon"
      - "--no-collector.fibrechannel"
      - "--collector.textfile.directory=/textfile/"
    volumes:
      - "/:/host:ro,rslave"
      - textfile:/textfile
    ports:
      - "9100:9100"
    networks:
      - iris

  # prom instance
  oncall-prometheus:
    image: prom/prometheus
    user: root
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - iris
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - iris
      - elastic
    volumes:
      - ./configs/grafana-sources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana:/var/lib/grafana/

  # oncall web service [main]
  oncall-web:
    build: .
    hostname: oncall
    labels:
      - prometheus-job=oncall-web-auto
      - co.elastic.logs/enabled=true
    ports:
      - "8080:8080"
      - "8090:8090"
    restart: unless-stopped
    environment:
      - DOCKER_DB_BOOTSTRAP=1
      - IRIS_API_HOST=iris
    volumes:
      - ./configs/config.docker.yaml:/home/oncall/config/config.yaml
    networks:
      - iris

  # oncall web mysql database
  oncall-mysql:
    hostname: oncall-mysql
    image: mysql:5.7
    labels:
      - co.elastic.logs/enabled=true
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    networks:
      - iris
  sla-db:
    hostname: sla-db
    container_name: sla-db
    image: postgres
    environment:
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=sla
      - POSTGRES_USER=postgres
    networks:
      - iris
    

  # ELK

networks:
  iris:
    name: iris
  elastic:
    external: true
volumes:
  textfile:
  grafana:
